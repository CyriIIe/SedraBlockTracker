import json
import time
import sqlite3
import subprocess
import logging
from telegram import Bot
import signal
import sys
import concurrent.futures
import asyncio

# Remplacez par votre token de bot Telegram
token = 'BOT_TOKEN'
# Instanciez le bot Telegram
bot = Bot(token=token)

# Configurer le logging pour afficher les logs en console
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Fonction pour g√©rer l'interruption par Ctrl+C
def signal_handler(sig, frame):
    logging.info("Interruption re√ßue. Arr√™t du bot...")
    sys.exit(0)

# Assigner le gestionnaire de signal pour l'interruption par Ctrl+C
signal.signal(signal.SIGINT, signal_handler)

# Fonction pour interroger le daemon Sedra via sedractl
async def check_block_rewards():
    # Connexion √† la base de donn√©es SQLite
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    
    # Charger tous les utilisateurs en m√©moire pour √©viter les requ√™tes r√©p√©t√©es
    cursor.execute("SELECT username, address FROM users")
    users = cursor.fetchall()
    user_dict = {address: username for username, address in users}
    last_user_update_time = time.time()
    logging.info("Les utilisateurs ont √©t√© charg√©s depuis la base de donn√©es.")
    
    # Stocker le hash du dernier bloc v√©rifi√©
    last_checked_hash = None
    
    while True:
        try:
            # Recharger les utilisateurs toutes les 5 minutes
            if time.time() - last_user_update_time > 300:
                cursor.execute("SELECT username, address FROM users")
                users = cursor.fetchall()
                user_dict = {address: username for username, address in users}
                last_user_update_time = time.time()
                logging.info("Les utilisateurs ont √©t√© recharg√©s depuis la base de donn√©es.")
                
            # Utiliser un pool de threads pour ex√©cuter des commandes en parall√®le
            with concurrent.futures.ThreadPoolExecutor() as executor:
                # Obtenir le hash du bloc le plus r√©cent (tip hash) via la commande ./sedractl GetSelectedTipHash
                future_tip_hash = executor.submit(subprocess.run, ['./sedractl', 'GetSelectedTipHash'], capture_output=True, text=True)
                result = future_tip_hash.result()

                if result.returncode != 0:
                    logging.error(f"Erreur lors de la r√©cup√©ration du tip hash: {result.stderr}")
                    await asyncio.sleep(0.01)
                    continue
                
                # V√©rifier si la sortie est un JSON valide
                try:
                    tip_data = json.loads(result.stdout)
                except json.JSONDecodeError as e:
                    logging.error(f"Erreur lors du parsing du JSON pour le tip hash: {e}")
                    await asyncio.sleep(0.01)
                    continue
                
                current_tip_hash = tip_data.get('getSelectedTipHashResponse', {}).get('selectedTipHash', '')
                
                # V√©rifier si le dernier bloc a d√©j√† √©t√© trait√©
                if current_tip_hash == last_checked_hash:
                    await asyncio.sleep(0.01)
                    continue
                
                # Pr√©parer la commande pour obtenir les d√©tails du dernier bloc via ./sedractl GetBlock
                logging.info(f"R√©cup√©ration des d√©tails du bloc: {current_tip_hash}")
                future_block = executor.submit(subprocess.run, ['./sedractl', 'GetBlock', current_tip_hash, 'true'], capture_output=True, text=True)
                result = future_block.result()

                if result.returncode != 0:
                    logging.error(f"Erreur lors de la r√©cup√©ration du bloc {current_tip_hash}: {result.stderr}")
                    await asyncio.sleep(0.01)
                    continue
                
                # V√©rifier si la sortie est un JSON valide
                try:
                    block_data = json.loads(result.stdout)
                except json.JSONDecodeError as e:
                    logging.error(f"Erreur lors du parsing du JSON pour le bloc: {e}")
                    await asyncio.sleep(0.01)
                    continue
                
                block = block_data.get('getBlockResponse', {}).get('block', {})
                logging.info(f"D√©tails du bloc {current_tip_hash} r√©cup√©r√©s avec succ√®s.")
                
                # V√©rifier la transaction de r√©compense (coinbase)
                transactions = block.get('transactions', [])
                for transaction in transactions:
                    outputs = transaction.get('outputs', [])
                    for output in outputs:
                        # V√©rifier si la transaction est une transaction coinbase
                        verbose_data = output.get('verboseData', {})
                        miner_address = verbose_data.get('scriptPublicKeyAddress', '')
                        reward_raw = output.get('amount', 0)
                        
                        # Conversion de la r√©compense en SDR avec 8 d√©cimales
                        reward = float(reward_raw) / 10**8
                        formatted_reward = "{:.8f}".format(reward)
                        
                        # V√©rifier si l'adresse appartient √† un utilisateur connu
                        if miner_address in user_dict:
                            username = user_dict[miner_address]
                            block_link = f"https://explorer.sedracoin.com/blocks/{current_tip_hash}"
                            message = (
                                f"F√©licitations {username}, vous avez trouv√© un nouveau bloc ! üéâ\n"
                                f"R√©compense : {formatted_reward} SDR\n"
                                f"[Voir le d√©tail du bloc sur l'explorateur]({block_link})"
                            )
                            await bot.send_message(chat_id='CHAT_ID', message_thread_id=61, text=message, parse_mode='Markdown')
                            logging.info(f"Notification envoy√©e √† {username}: {message}")
                
                # Mettre √† jour le dernier hash v√©rifi√©
                last_checked_hash = current_tip_hash
        except Exception as e:
            logging.error(f"Erreur lors de la v√©rification du bloc {current_tip_hash}: {e}")
        
        # Attendre un certain temps avant de refaire la v√©rification (toutes les 0.01 secondes pour minimiser le risque de rater un bloc)
        await asyncio.sleep(0.01)

# Lancer la fonction de v√©rification
async def main():
    # Cr√©er un processus de v√©rification en boucle
    await check_block_rewards()

if __name__ == "__main__":
    asyncio.run(main())

